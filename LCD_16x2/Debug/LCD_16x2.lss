
LCD_16x2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000026a6  0000271a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b3c  00000000  00000000  00002740  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c66  00000000  00000000  0000427c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005022  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005192  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000962f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a0 10 	call	0x2140	; 0x2140 <main>
      7a:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e7       	ldi	r26, 0x7C	; 124
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 36 13 	jmp	0x266c	; 0x266c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e7       	ldi	r24, 0x7C	; 124
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 36 13 	jmp	0x266c	; 0x266c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 46 13 	jmp	0x268c	; 0x268c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "DIO_Register.h"
#include "BIT_Math.h"

void DIO_VidSetPinDirection	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8State)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if ( OUTPUT==LOC_u8State)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <DIO_VidSetPinDirection+0x22>
     b56:	6f c0       	rjmp	.+222    	; 0xc36 <DIO_VidSetPinDirection+0x100>
	{
		switch (LOC_u8Port)
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	49 f1       	breq	.+82     	; 0xbbe <DIO_VidSetPinDirection+0x88>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 05       	cpc	r19, r1
     b74:	2c f4       	brge	.+10     	; 0xb80 <DIO_VidSetPinDirection+0x4a>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	61 f0       	breq	.+24     	; 0xb96 <DIO_VidSetPinDirection+0x60>
     b7e:	d2 c0       	rjmp	.+420    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	71 f1       	breq	.+92     	; 0xbe6 <DIO_VidSetPinDirection+0xb0>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	e9 f1       	breq	.+122    	; 0xc0e <DIO_VidSetPinDirection+0xd8>
     b94:	c7 c0       	rjmp	.+398    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: SET_BIT(DDRA, LOC_u8Pin); break;
     b96:	aa e3       	ldi	r26, 0x3A	; 58
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ea e3       	ldi	r30, 0x3A	; 58
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_VidSetPinDirection+0x7e>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_VidSetPinDirection+0x7a>
     bb8:	84 2b       	or	r24, r20
     bba:	8c 93       	st	X, r24
     bbc:	b3 c0       	rjmp	.+358    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
		case 1: SET_BIT(DDRB, LOC_u8Pin); break;
     bbe:	a7 e3       	ldi	r26, 0x37	; 55
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e3       	ldi	r30, 0x37	; 55
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	48 2f       	mov	r20, r24
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 2e       	mov	r0, r18
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_VidSetPinDirection+0xa6>
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_VidSetPinDirection+0xa2>
     be0:	84 2b       	or	r24, r20
     be2:	8c 93       	st	X, r24
     be4:	9f c0       	rjmp	.+318    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
		case 2: SET_BIT(DDRC, LOC_u8Pin); break;
     be6:	a4 e3       	ldi	r26, 0x34	; 52
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e4 e3       	ldi	r30, 0x34	; 52
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 2e       	mov	r0, r18
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <DIO_VidSetPinDirection+0xce>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <DIO_VidSetPinDirection+0xca>
     c08:	84 2b       	or	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	8b c0       	rjmp	.+278    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
		case 3: SET_BIT(DDRD, LOC_u8Pin); break;
     c0e:	a1 e3       	ldi	r26, 0x31	; 49
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e1 e3       	ldi	r30, 0x31	; 49
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <DIO_VidSetPinDirection+0xf6>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <DIO_VidSetPinDirection+0xf2>
     c30:	84 2b       	or	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	77 c0       	rjmp	.+238    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if (INPUT==LOC_u8State)
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	88 23       	and	r24, r24
     c3a:	09 f0       	breq	.+2      	; 0xc3e <DIO_VidSetPinDirection+0x108>
     c3c:	73 c0       	rjmp	.+230    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
	{
		switch (LOC_u8Port)
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	3d 83       	std	Y+5, r19	; 0x05
     c46:	2c 83       	std	Y+4, r18	; 0x04
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	9d 81       	ldd	r25, Y+5	; 0x05
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	91 05       	cpc	r25, r1
     c50:	59 f1       	breq	.+86     	; 0xca8 <DIO_VidSetPinDirection+0x172>
     c52:	2c 81       	ldd	r18, Y+4	; 0x04
     c54:	3d 81       	ldd	r19, Y+5	; 0x05
     c56:	22 30       	cpi	r18, 0x02	; 2
     c58:	31 05       	cpc	r19, r1
     c5a:	2c f4       	brge	.+10     	; 0xc66 <DIO_VidSetPinDirection+0x130>
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	69 f0       	breq	.+26     	; 0xc7e <DIO_VidSetPinDirection+0x148>
     c64:	5f c0       	rjmp	.+190    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	89 f1       	breq	.+98     	; 0xcd2 <DIO_VidSetPinDirection+0x19c>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	83 30       	cpi	r24, 0x03	; 3
     c76:	91 05       	cpc	r25, r1
     c78:	09 f4       	brne	.+2      	; 0xc7c <DIO_VidSetPinDirection+0x146>
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <DIO_VidSetPinDirection+0x1c6>
     c7c:	53 c0       	rjmp	.+166    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: CLR_BIT(DDRA, LOC_u8Pin); break;
     c7e:	aa e3       	ldi	r26, 0x3A	; 58
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ea e3       	ldi	r30, 0x3A	; 58
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_VidSetPinDirection+0x166>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_VidSetPinDirection+0x162>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	3e c0       	rjmp	.+124    	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
		case 1: CLR_BIT(DDRB, LOC_u8Pin); break;
     ca8:	a7 e3       	ldi	r26, 0x37	; 55
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	48 2f       	mov	r20, r24
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 2e       	mov	r0, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <DIO_VidSetPinDirection+0x190>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <DIO_VidSetPinDirection+0x18c>
     cca:	80 95       	com	r24
     ccc:	84 23       	and	r24, r20
     cce:	8c 93       	st	X, r24
     cd0:	29 c0       	rjmp	.+82     	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
		case 2: CLR_BIT(DDRC, LOC_u8Pin); break;
     cd2:	a4 e3       	ldi	r26, 0x34	; 52
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e4 e3       	ldi	r30, 0x34	; 52
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_VidSetPinDirection+0x1ba>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_VidSetPinDirection+0x1b6>
     cf4:	80 95       	com	r24
     cf6:	84 23       	and	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	14 c0       	rjmp	.+40     	; 0xd24 <DIO_VidSetPinDirection+0x1ee>
		case 3: CLR_BIT(DDRD, LOC_u8Pin); break;
     cfc:	a1 e3       	ldi	r26, 0x31	; 49
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e3       	ldi	r30, 0x31	; 49
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_VidSetPinDirection+0x1e4>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_VidSetPinDirection+0x1e0>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
		}
	}
}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	27 97       	sbiw	r28, 0x07	; 7
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	6a 83       	std	Y+2, r22	; 0x02
     d4e:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1==LOC_u8Value)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	09 f0       	breq	.+2      	; 0xd58 <DIO_VidSetPinValue+0x22>
     d56:	6f c0       	rjmp	.+222    	; 0xe36 <DIO_VidSetPinValue+0x100>
	{
		switch (LOC_u8Port)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3f 83       	std	Y+7, r19	; 0x07
     d60:	2e 83       	std	Y+6, r18	; 0x06
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	9f 81       	ldd	r25, Y+7	; 0x07
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	49 f1       	breq	.+82     	; 0xdbe <DIO_VidSetPinValue+0x88>
     d6c:	2e 81       	ldd	r18, Y+6	; 0x06
     d6e:	3f 81       	ldd	r19, Y+7	; 0x07
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	2c f4       	brge	.+10     	; 0xd80 <DIO_VidSetPinValue+0x4a>
     d76:	8e 81       	ldd	r24, Y+6	; 0x06
     d78:	9f 81       	ldd	r25, Y+7	; 0x07
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	61 f0       	breq	.+24     	; 0xd96 <DIO_VidSetPinValue+0x60>
     d7e:	d2 c0       	rjmp	.+420    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
     d80:	2e 81       	ldd	r18, Y+6	; 0x06
     d82:	3f 81       	ldd	r19, Y+7	; 0x07
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	71 f1       	breq	.+92     	; 0xde6 <DIO_VidSetPinValue+0xb0>
     d8a:	8e 81       	ldd	r24, Y+6	; 0x06
     d8c:	9f 81       	ldd	r25, Y+7	; 0x07
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	e9 f1       	breq	.+122    	; 0xe0e <DIO_VidSetPinValue+0xd8>
     d94:	c7 c0       	rjmp	.+398    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: SET_BIT(PORTA, LOC_u8Pin); break;
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_VidSetPinValue+0x7e>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_VidSetPinValue+0x7a>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	b3 c0       	rjmp	.+358    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		case 1: SET_BIT(PORTB, LOC_u8Pin); break;
     dbe:	a8 e3       	ldi	r26, 0x38	; 56
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e8 e3       	ldi	r30, 0x38	; 56
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_VidSetPinValue+0xa6>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_VidSetPinValue+0xa2>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	9f c0       	rjmp	.+318    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		case 2: SET_BIT(PORTC, LOC_u8Pin); break;
     de6:	a5 e3       	ldi	r26, 0x35	; 53
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e5 e3       	ldi	r30, 0x35	; 53
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_VidSetPinValue+0xce>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_VidSetPinValue+0xca>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	8b c0       	rjmp	.+278    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		case 3: SET_BIT(PORTD, LOC_u8Pin); break;
     e0e:	a2 e3       	ldi	r26, 0x32	; 50
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e2 e3       	ldi	r30, 0x32	; 50
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_VidSetPinValue+0xf6>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_VidSetPinValue+0xf2>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	77 c0       	rjmp	.+238    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (0==LOC_u8Value)
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	88 23       	and	r24, r24
     e3a:	09 f0       	breq	.+2      	; 0xe3e <DIO_VidSetPinValue+0x108>
     e3c:	73 c0       	rjmp	.+230    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
	{
		switch (LOC_u8Port)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	3d 83       	std	Y+5, r19	; 0x05
     e46:	2c 83       	std	Y+4, r18	; 0x04
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	9d 81       	ldd	r25, Y+5	; 0x05
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	91 05       	cpc	r25, r1
     e50:	59 f1       	breq	.+86     	; 0xea8 <DIO_VidSetPinValue+0x172>
     e52:	2c 81       	ldd	r18, Y+4	; 0x04
     e54:	3d 81       	ldd	r19, Y+5	; 0x05
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	2c f4       	brge	.+10     	; 0xe66 <DIO_VidSetPinValue+0x130>
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f0       	breq	.+26     	; 0xe7e <DIO_VidSetPinValue+0x148>
     e64:	5f c0       	rjmp	.+190    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	3d 81       	ldd	r19, Y+5	; 0x05
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	89 f1       	breq	.+98     	; 0xed2 <DIO_VidSetPinValue+0x19c>
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	91 05       	cpc	r25, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c <DIO_VidSetPinValue+0x146>
     e7a:	40 c0       	rjmp	.+128    	; 0xefc <DIO_VidSetPinValue+0x1c6>
     e7c:	53 c0       	rjmp	.+166    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: CLR_BIT(PORTA, LOC_u8Pin); break;
     e7e:	ab e3       	ldi	r26, 0x3B	; 59
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_VidSetPinValue+0x166>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_VidSetPinValue+0x162>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	3e c0       	rjmp	.+124    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		case 1: CLR_BIT(PORTB, LOC_u8Pin); break;
     ea8:	a8 e3       	ldi	r26, 0x38	; 56
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e8 e3       	ldi	r30, 0x38	; 56
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_VidSetPinValue+0x190>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_VidSetPinValue+0x18c>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	29 c0       	rjmp	.+82     	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		case 2: CLR_BIT(PORTC, LOC_u8Pin); break;
     ed2:	a5 e3       	ldi	r26, 0x35	; 53
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e5 e3       	ldi	r30, 0x35	; 53
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_VidSetPinValue+0x1ba>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_VidSetPinValue+0x1b6>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	14 c0       	rjmp	.+40     	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		case 3: CLR_BIT(PORTD, LOC_u8Pin); break;
     efc:	a2 e3       	ldi	r26, 0x32	; 50
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e2 e3       	ldi	r30, 0x32	; 50
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_VidSetPinValue+0x1e4>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_VidSetPinValue+0x1e0>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
		}
	}
}
     f24:	27 96       	adiw	r28, 0x07	; 7
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	( u8 LOC_u8Port, u8 LOC_u8Value)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <DIO_VidSetPortDirection+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <DIO_VidSetPortDirection+0x8>
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3c 83       	std	Y+4, r19	; 0x04
     f4e:	2b 83       	std	Y+3, r18	; 0x03
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	d1 f0       	breq	.+52     	; 0xf8e <DIO_VidSetPortDirection+0x58>
     f5a:	2b 81       	ldd	r18, Y+3	; 0x03
     f5c:	3c 81       	ldd	r19, Y+4	; 0x04
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	2c f4       	brge	.+10     	; 0xf6e <DIO_VidSetPortDirection+0x38>
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	61 f0       	breq	.+24     	; 0xf84 <DIO_VidSetPortDirection+0x4e>
     f6c:	1e c0       	rjmp	.+60     	; 0xfaa <DIO_VidSetPortDirection+0x74>
     f6e:	2b 81       	ldd	r18, Y+3	; 0x03
     f70:	3c 81       	ldd	r19, Y+4	; 0x04
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	81 f0       	breq	.+32     	; 0xf98 <DIO_VidSetPortDirection+0x62>
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	91 05       	cpc	r25, r1
     f80:	81 f0       	breq	.+32     	; 0xfa2 <DIO_VidSetPortDirection+0x6c>
     f82:	13 c0       	rjmp	.+38     	; 0xfaa <DIO_VidSetPortDirection+0x74>
	{
	case 0: DDRA = LOC_u8Value; break;
     f84:	ea e3       	ldi	r30, 0x3A	; 58
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	80 83       	st	Z, r24
     f8c:	0e c0       	rjmp	.+28     	; 0xfaa <DIO_VidSetPortDirection+0x74>
	case 1: DDRB = LOC_u8Value; break;
     f8e:	e7 e3       	ldi	r30, 0x37	; 55
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	80 83       	st	Z, r24
     f96:	09 c0       	rjmp	.+18     	; 0xfaa <DIO_VidSetPortDirection+0x74>
	case 2: DDRC = LOC_u8Value; break;
     f98:	e4 e3       	ldi	r30, 0x34	; 52
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	80 83       	st	Z, r24
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <DIO_VidSetPortDirection+0x74>
	case 3: DDRD = LOC_u8Value; break;
     fa2:	e1 e3       	ldi	r30, 0x31	; 49
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	80 83       	st	Z, r24
	}
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <DIO_VidSetPortValue>:

void DIO_VidSetPortValue	( u8 LOC_u8Port, u8 LOC_u8Value)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <DIO_VidSetPortValue+0x6>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <DIO_VidSetPortValue+0x8>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	3c 83       	std	Y+4, r19	; 0x04
     fd0:	2b 83       	std	Y+3, r18	; 0x03
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	91 05       	cpc	r25, r1
     fda:	d1 f0       	breq	.+52     	; 0x1010 <DIO_VidSetPortValue+0x58>
     fdc:	2b 81       	ldd	r18, Y+3	; 0x03
     fde:	3c 81       	ldd	r19, Y+4	; 0x04
     fe0:	22 30       	cpi	r18, 0x02	; 2
     fe2:	31 05       	cpc	r19, r1
     fe4:	2c f4       	brge	.+10     	; 0xff0 <DIO_VidSetPortValue+0x38>
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	9c 81       	ldd	r25, Y+4	; 0x04
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	61 f0       	breq	.+24     	; 0x1006 <DIO_VidSetPortValue+0x4e>
     fee:	1e c0       	rjmp	.+60     	; 0x102c <DIO_VidSetPortValue+0x74>
     ff0:	2b 81       	ldd	r18, Y+3	; 0x03
     ff2:	3c 81       	ldd	r19, Y+4	; 0x04
     ff4:	22 30       	cpi	r18, 0x02	; 2
     ff6:	31 05       	cpc	r19, r1
     ff8:	81 f0       	breq	.+32     	; 0x101a <DIO_VidSetPortValue+0x62>
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	83 30       	cpi	r24, 0x03	; 3
    1000:	91 05       	cpc	r25, r1
    1002:	81 f0       	breq	.+32     	; 0x1024 <DIO_VidSetPortValue+0x6c>
    1004:	13 c0       	rjmp	.+38     	; 0x102c <DIO_VidSetPortValue+0x74>
	{
	case 0: PORTA = LOC_u8Value; break;
    1006:	eb e3       	ldi	r30, 0x3B	; 59
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	80 83       	st	Z, r24
    100e:	0e c0       	rjmp	.+28     	; 0x102c <DIO_VidSetPortValue+0x74>
	case 1: PORTB = LOC_u8Value; break;
    1010:	e8 e3       	ldi	r30, 0x38	; 56
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	80 83       	st	Z, r24
    1018:	09 c0       	rjmp	.+18     	; 0x102c <DIO_VidSetPortValue+0x74>
	case 2: PORTC = LOC_u8Value; break;
    101a:	e5 e3       	ldi	r30, 0x35	; 53
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	80 83       	st	Z, r24
    1022:	04 c0       	rjmp	.+8      	; 0x102c <DIO_VidSetPortValue+0x74>
	case 3: PORTD = LOC_u8Value; break;
    1024:	e2 e3       	ldi	r30, 0x32	; 50
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	80 83       	st	Z, r24
	}
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_u8GetPinValue+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_u8GetPinValue+0x8>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	8a 83       	std	Y+2, r24	; 0x02
    104a:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch (LOC_u8Port)
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3d 83       	std	Y+5, r19	; 0x05
    1054:	2c 83       	std	Y+4, r18	; 0x04
    1056:	4c 81       	ldd	r20, Y+4	; 0x04
    1058:	5d 81       	ldd	r21, Y+5	; 0x05
    105a:	41 30       	cpi	r20, 0x01	; 1
    105c:	51 05       	cpc	r21, r1
    105e:	41 f1       	breq	.+80     	; 0x10b0 <DIO_u8GetPinValue+0x76>
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	9d 81       	ldd	r25, Y+5	; 0x05
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	91 05       	cpc	r25, r1
    1068:	34 f4       	brge	.+12     	; 0x1076 <DIO_u8GetPinValue+0x3c>
    106a:	2c 81       	ldd	r18, Y+4	; 0x04
    106c:	3d 81       	ldd	r19, Y+5	; 0x05
    106e:	21 15       	cp	r18, r1
    1070:	31 05       	cpc	r19, r1
    1072:	61 f0       	breq	.+24     	; 0x108c <DIO_u8GetPinValue+0x52>
    1074:	52 c0       	rjmp	.+164    	; 0x111a <DIO_u8GetPinValue+0xe0>
    1076:	4c 81       	ldd	r20, Y+4	; 0x04
    1078:	5d 81       	ldd	r21, Y+5	; 0x05
    107a:	42 30       	cpi	r20, 0x02	; 2
    107c:	51 05       	cpc	r21, r1
    107e:	51 f1       	breq	.+84     	; 0x10d4 <DIO_u8GetPinValue+0x9a>
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	9d 81       	ldd	r25, Y+5	; 0x05
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	91 05       	cpc	r25, r1
    1088:	b9 f1       	breq	.+110    	; 0x10f8 <DIO_u8GetPinValue+0xbe>
    108a:	47 c0       	rjmp	.+142    	; 0x111a <DIO_u8GetPinValue+0xe0>
	{
	case 0: value = GET_BIT(PINA, LOC_u8Pin); break;
    108c:	e9 e3       	ldi	r30, 0x39	; 57
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_u8GetPinValue+0x6a>
    10a0:	55 95       	asr	r21
    10a2:	47 95       	ror	r20
    10a4:	8a 95       	dec	r24
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_u8GetPinValue+0x66>
    10a8:	ca 01       	movw	r24, r20
    10aa:	81 70       	andi	r24, 0x01	; 1
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	35 c0       	rjmp	.+106    	; 0x111a <DIO_u8GetPinValue+0xe0>
	case 1: value = GET_BIT(PINB, LOC_u8Pin); break;
    10b0:	e6 e3       	ldi	r30, 0x36	; 54
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_u8GetPinValue+0x8e>
    10c4:	55 95       	asr	r21
    10c6:	47 95       	ror	r20
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_u8GetPinValue+0x8a>
    10cc:	ca 01       	movw	r24, r20
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	23 c0       	rjmp	.+70     	; 0x111a <DIO_u8GetPinValue+0xe0>
	case 2: value = GET_BIT(PINC, LOC_u8Pin); break;
    10d4:	e3 e3       	ldi	r30, 0x33	; 51
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a9 01       	movw	r20, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_u8GetPinValue+0xb2>
    10e8:	55 95       	asr	r21
    10ea:	47 95       	ror	r20
    10ec:	8a 95       	dec	r24
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_u8GetPinValue+0xae>
    10f0:	ca 01       	movw	r24, r20
    10f2:	81 70       	andi	r24, 0x01	; 1
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	11 c0       	rjmp	.+34     	; 0x111a <DIO_u8GetPinValue+0xe0>
	case 3: value = GET_BIT(PIND, LOC_u8Pin); break;
    10f8:	e0 e3       	ldi	r30, 0x30	; 48
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_u8GetPinValue+0xd6>
    110c:	55 95       	asr	r21
    110e:	47 95       	ror	r20
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_u8GetPinValue+0xd2>
    1114:	ca 01       	movw	r24, r20
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <LCD_VidInit>:
#include "DIO_Interface.h"
#include "LCD_Config.h"


void LCD_VidInit(void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	e8 97       	sbiw	r28, 0x38	; 56
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a8 e4       	ldi	r26, 0x48	; 72
    1146:	b2 e4       	ldi	r27, 0x42	; 66
    1148:	8d ab       	std	Y+53, r24	; 0x35
    114a:	9e ab       	std	Y+54, r25	; 0x36
    114c:	af ab       	std	Y+55, r26	; 0x37
    114e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	6d a9       	ldd	r22, Y+53	; 0x35
    1152:	7e a9       	ldd	r23, Y+54	; 0x36
    1154:	8f a9       	ldd	r24, Y+55	; 0x37
    1156:	98 ad       	ldd	r25, Y+56	; 0x38
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a ef       	ldi	r20, 0xFA	; 250
    115e:	54 e4       	ldi	r21, 0x44	; 68
    1160:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	89 ab       	std	Y+49, r24	; 0x31
    116a:	9a ab       	std	Y+50, r25	; 0x32
    116c:	ab ab       	std	Y+51, r26	; 0x33
    116e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1170:	69 a9       	ldd	r22, Y+49	; 0x31
    1172:	7a a9       	ldd	r23, Y+50	; 0x32
    1174:	8b a9       	ldd	r24, Y+51	; 0x33
    1176:	9c a9       	ldd	r25, Y+52	; 0x34
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <LCD_VidInit+0x66>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	98 ab       	std	Y+48, r25	; 0x30
    118e:	8f a7       	std	Y+47, r24	; 0x2f
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    1192:	69 a9       	ldd	r22, Y+49	; 0x31
    1194:	7a a9       	ldd	r23, Y+50	; 0x32
    1196:	8b a9       	ldd	r24, Y+51	; 0x33
    1198:	9c a9       	ldd	r25, Y+52	; 0x34
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	6d a9       	ldd	r22, Y+53	; 0x35
    11ac:	7e a9       	ldd	r23, Y+54	; 0x36
    11ae:	8f a9       	ldd	r24, Y+55	; 0x37
    11b0:	98 ad       	ldd	r25, Y+56	; 0x38
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	98 ab       	std	Y+48, r25	; 0x30
    11d0:	8f a7       	std	Y+47, r24	; 0x2f
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <LCD_VidInit+0xc6>
    11d4:	88 ec       	ldi	r24, 0xC8	; 200
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9e a7       	std	Y+46, r25	; 0x2e
    11da:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    11de:	9e a5       	ldd	r25, Y+46	; 0x2e
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <LCD_VidInit+0xb4>
    11e4:	9e a7       	std	Y+46, r25	; 0x2e
    11e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ea:	98 a9       	ldd	r25, Y+48	; 0x30
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	98 ab       	std	Y+48, r25	; 0x30
    11f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11f4:	98 a9       	ldd	r25, Y+48	; 0x30
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <LCD_VidInit+0xa8>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	69 a9       	ldd	r22, Y+49	; 0x31
    11fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1200:	8b a9       	ldd	r24, Y+51	; 0x33
    1202:	9c a9       	ldd	r25, Y+52	; 0x34
    1204:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	98 ab       	std	Y+48, r25	; 0x30
    120e:	8f a7       	std	Y+47, r24	; 0x2f
    1210:	8f a5       	ldd	r24, Y+47	; 0x2f
    1212:	98 a9       	ldd	r25, Y+48	; 0x30
    1214:	9c a7       	std	Y+44, r25	; 0x2c
    1216:	8b a7       	std	Y+43, r24	; 0x2b
    1218:	8b a5       	ldd	r24, Y+43	; 0x2b
    121a:	9c a5       	ldd	r25, Y+44	; 0x2c
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <LCD_VidInit+0xf0>
    1220:	9c a7       	std	Y+44, r25	; 0x2c
    1222:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); // wait for LCD to initialize
	DIO_VidSetPortDirection(LCD_DataPort, 0xff ); //Data port direction output
    1224:	83 e0       	ldi	r24, 0x03	; 3
    1226:	6f ef       	ldi	r22, 0xFF	; 255
    1228:	0e 94 9b 07 	call	0xf36	; 0xf36 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_CTRLPort,  LCD_RS_PIN, OUT_HIGH); //RS
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	63 e0       	ldi	r22, 0x03	; 3
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRLPort,  LCD_RW_PIN, OUT_HIGH); //RW
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	64 e0       	ldi	r22, 0x04	; 4
    123a:	41 e0       	ldi	r20, 0x01	; 1
    123c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRLPort,  LCD_Enb_PIN, OUT_HIGH); //Enb    CTRL PINS direction output
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	65 e0       	ldi	r22, 0x05	; 5
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDirection>

	LCD_VidWriteCommand(0b00111000); 	//function set
    124a:	88 e3       	ldi	r24, 0x38	; 56
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a0 e8       	ldi	r26, 0x80	; 128
    1258:	bf e3       	ldi	r27, 0x3F	; 63
    125a:	8f a3       	std	Y+39, r24	; 0x27
    125c:	98 a7       	std	Y+40, r25	; 0x28
    125e:	a9 a7       	std	Y+41, r26	; 0x29
    1260:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1262:	6f a1       	ldd	r22, Y+39	; 0x27
    1264:	78 a5       	ldd	r23, Y+40	; 0x28
    1266:	89 a5       	ldd	r24, Y+41	; 0x29
    1268:	9a a5       	ldd	r25, Y+42	; 0x2a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	4a ef       	ldi	r20, 0xFA	; 250
    1270:	54 e4       	ldi	r21, 0x44	; 68
    1272:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8b a3       	std	Y+35, r24	; 0x23
    127c:	9c a3       	std	Y+36, r25	; 0x24
    127e:	ad a3       	std	Y+37, r26	; 0x25
    1280:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1282:	6b a1       	ldd	r22, Y+35	; 0x23
    1284:	7c a1       	ldd	r23, Y+36	; 0x24
    1286:	8d a1       	ldd	r24, Y+37	; 0x25
    1288:	9e a1       	ldd	r25, Y+38	; 0x26
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	2c f4       	brge	.+10     	; 0x12a4 <LCD_VidInit+0x178>
		__ticks = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9a a3       	std	Y+34, r25	; 0x22
    12a0:	89 a3       	std	Y+33, r24	; 0x21
    12a2:	3f c0       	rjmp	.+126    	; 0x1322 <LCD_VidInit+0x1f6>
	else if (__tmp > 65535)
    12a4:	6b a1       	ldd	r22, Y+35	; 0x23
    12a6:	7c a1       	ldd	r23, Y+36	; 0x24
    12a8:	8d a1       	ldd	r24, Y+37	; 0x25
    12aa:	9e a1       	ldd	r25, Y+38	; 0x26
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	57 e4       	ldi	r21, 0x47	; 71
    12b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	4c f5       	brge	.+82     	; 0x130e <LCD_VidInit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12bc:	6f a1       	ldd	r22, Y+39	; 0x27
    12be:	78 a5       	ldd	r23, Y+40	; 0x28
    12c0:	89 a5       	ldd	r24, Y+41	; 0x29
    12c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e2       	ldi	r20, 0x20	; 32
    12ca:	51 e4       	ldi	r21, 0x41	; 65
    12cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
    12e4:	0f c0       	rjmp	.+30     	; 0x1304 <LCD_VidInit+0x1d8>
    12e6:	88 ec       	ldi	r24, 0xC8	; 200
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	98 a3       	std	Y+32, r25	; 0x20
    12ec:	8f 8f       	std	Y+31, r24	; 0x1f
    12ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12f0:	98 a1       	ldd	r25, Y+32	; 0x20
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_VidInit+0x1c6>
    12f6:	98 a3       	std	Y+32, r25	; 0x20
    12f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	89 a1       	ldd	r24, Y+33	; 0x21
    12fc:	9a a1       	ldd	r25, Y+34	; 0x22
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	9a a3       	std	Y+34, r25	; 0x22
    1302:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1304:	89 a1       	ldd	r24, Y+33	; 0x21
    1306:	9a a1       	ldd	r25, Y+34	; 0x22
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	69 f7       	brne	.-38     	; 0x12e6 <LCD_VidInit+0x1ba>
    130c:	14 c0       	rjmp	.+40     	; 0x1336 <LCD_VidInit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130e:	6b a1       	ldd	r22, Y+35	; 0x23
    1310:	7c a1       	ldd	r23, Y+36	; 0x24
    1312:	8d a1       	ldd	r24, Y+37	; 0x25
    1314:	9e a1       	ldd	r25, Y+38	; 0x26
    1316:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9a a3       	std	Y+34, r25	; 0x22
    1320:	89 a3       	std	Y+33, r24	; 0x21
    1322:	89 a1       	ldd	r24, Y+33	; 0x21
    1324:	9a a1       	ldd	r25, Y+34	; 0x22
    1326:	9e 8f       	std	Y+30, r25	; 0x1e
    1328:	8d 8f       	std	Y+29, r24	; 0x1d
    132a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    132c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <LCD_VidInit+0x202>
    1332:	9e 8f       	std	Y+30, r25	; 0x1e
    1334:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); // wait for LCD to Function set
	LCD_VidWriteCommand(0b00001100);	//Display On
    1336:	8c e0       	ldi	r24, 0x0C	; 12
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 e8       	ldi	r26, 0x80	; 128
    1344:	bf e3       	ldi	r27, 0x3F	; 63
    1346:	89 8f       	std	Y+25, r24	; 0x19
    1348:	9a 8f       	std	Y+26, r25	; 0x1a
    134a:	ab 8f       	std	Y+27, r26	; 0x1b
    134c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134e:	69 8d       	ldd	r22, Y+25	; 0x19
    1350:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1354:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	4a ef       	ldi	r20, 0xFA	; 250
    135c:	54 e4       	ldi	r21, 0x44	; 68
    135e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	8d 8b       	std	Y+21, r24	; 0x15
    1368:	9e 8b       	std	Y+22, r25	; 0x16
    136a:	af 8b       	std	Y+23, r26	; 0x17
    136c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    136e:	6d 89       	ldd	r22, Y+21	; 0x15
    1370:	7e 89       	ldd	r23, Y+22	; 0x16
    1372:	8f 89       	ldd	r24, Y+23	; 0x17
    1374:	98 8d       	ldd	r25, Y+24	; 0x18
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1382:	88 23       	and	r24, r24
    1384:	2c f4       	brge	.+10     	; 0x1390 <LCD_VidInit+0x264>
		__ticks = 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	9c 8b       	std	Y+20, r25	; 0x14
    138c:	8b 8b       	std	Y+19, r24	; 0x13
    138e:	3f c0       	rjmp	.+126    	; 0x140e <LCD_VidInit+0x2e2>
	else if (__tmp > 65535)
    1390:	6d 89       	ldd	r22, Y+21	; 0x15
    1392:	7e 89       	ldd	r23, Y+22	; 0x16
    1394:	8f 89       	ldd	r24, Y+23	; 0x17
    1396:	98 8d       	ldd	r25, Y+24	; 0x18
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	3f ef       	ldi	r19, 0xFF	; 255
    139c:	4f e7       	ldi	r20, 0x7F	; 127
    139e:	57 e4       	ldi	r21, 0x47	; 71
    13a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13a4:	18 16       	cp	r1, r24
    13a6:	4c f5       	brge	.+82     	; 0x13fa <LCD_VidInit+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a8:	69 8d       	ldd	r22, Y+25	; 0x19
    13aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	bc 01       	movw	r22, r24
    13c2:	cd 01       	movw	r24, r26
    13c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9c 8b       	std	Y+20, r25	; 0x14
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <LCD_VidInit+0x2c4>
    13d2:	88 ec       	ldi	r24, 0xC8	; 200
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9a 8b       	std	Y+18, r25	; 0x12
    13d8:	89 8b       	std	Y+17, r24	; 0x11
    13da:	89 89       	ldd	r24, Y+17	; 0x11
    13dc:	9a 89       	ldd	r25, Y+18	; 0x12
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <LCD_VidInit+0x2b2>
    13e2:	9a 8b       	std	Y+18, r25	; 0x12
    13e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e6:	8b 89       	ldd	r24, Y+19	; 0x13
    13e8:	9c 89       	ldd	r25, Y+20	; 0x14
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	9c 8b       	std	Y+20, r25	; 0x14
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f0:	8b 89       	ldd	r24, Y+19	; 0x13
    13f2:	9c 89       	ldd	r25, Y+20	; 0x14
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	69 f7       	brne	.-38     	; 0x13d2 <LCD_VidInit+0x2a6>
    13f8:	14 c0       	rjmp	.+40     	; 0x1422 <LCD_VidInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fa:	6d 89       	ldd	r22, Y+21	; 0x15
    13fc:	7e 89       	ldd	r23, Y+22	; 0x16
    13fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1400:	98 8d       	ldd	r25, Y+24	; 0x18
    1402:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9c 8b       	std	Y+20, r25	; 0x14
    140c:	8b 8b       	std	Y+19, r24	; 0x13
    140e:	8b 89       	ldd	r24, Y+19	; 0x13
    1410:	9c 89       	ldd	r25, Y+20	; 0x14
    1412:	98 8b       	std	Y+16, r25	; 0x10
    1414:	8f 87       	std	Y+15, r24	; 0x0f
    1416:	8f 85       	ldd	r24, Y+15	; 0x0f
    1418:	98 89       	ldd	r25, Y+16	; 0x10
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <LCD_VidInit+0x2ee>
    141e:	98 8b       	std	Y+16, r25	; 0x10
    1420:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); // wait for LCD to Display On
	LCD_VidWriteCommand(0b00000001);	//Clear Display 
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e4       	ldi	r27, 0x40	; 64
    1432:	8b 87       	std	Y+11, r24	; 0x0b
    1434:	9c 87       	std	Y+12, r25	; 0x0c
    1436:	ad 87       	std	Y+13, r26	; 0x0d
    1438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143a:	6b 85       	ldd	r22, Y+11	; 0x0b
    143c:	7c 85       	ldd	r23, Y+12	; 0x0c
    143e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1440:	9e 85       	ldd	r25, Y+14	; 0x0e
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	4a ef       	ldi	r20, 0xFA	; 250
    1448:	54 e4       	ldi	r21, 0x44	; 68
    144a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8f 83       	std	Y+7, r24	; 0x07
    1454:	98 87       	std	Y+8, r25	; 0x08
    1456:	a9 87       	std	Y+9, r26	; 0x09
    1458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e8       	ldi	r20, 0x80	; 128
    1468:	5f e3       	ldi	r21, 0x3F	; 63
    146a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    146e:	88 23       	and	r24, r24
    1470:	2c f4       	brge	.+10     	; 0x147c <LCD_VidInit+0x350>
		__ticks = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	3f c0       	rjmp	.+126    	; 0x14fa <LCD_VidInit+0x3ce>
	else if (__tmp > 65535)
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1490:	18 16       	cp	r1, r24
    1492:	4c f5       	brge	.+82     	; 0x14e6 <LCD_VidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1494:	6b 85       	ldd	r22, Y+11	; 0x0b
    1496:	7c 85       	ldd	r23, Y+12	; 0x0c
    1498:	8d 85       	ldd	r24, Y+13	; 0x0d
    149a:	9e 85       	ldd	r25, Y+14	; 0x0e
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e2       	ldi	r20, 0x20	; 32
    14a2:	51 e4       	ldi	r21, 0x41	; 65
    14a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <LCD_VidInit+0x3b0>
    14be:	88 ec       	ldi	r24, 0xC8	; 200
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9c 83       	std	Y+4, r25	; 0x04
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <LCD_VidInit+0x39e>
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	69 f7       	brne	.-38     	; 0x14be <LCD_VidInit+0x392>
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <LCD_VidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_VidInit+0x3da>
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // wait for LCD to Clear Display

}
    150e:	e8 96       	adiw	r28, 0x38	; 56
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <LCD_VidDisplayOn>:

void LCD_VidDisplayOn (void)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	2e 97       	sbiw	r28, 0x0e	; 14
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61

	LCD_VidWriteCommand(0b00001100);	//Display On
    1534:	8c e0       	ldi	r24, 0x0C	; 12
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a0 e8       	ldi	r26, 0x80	; 128
    1542:	bf e3       	ldi	r27, 0x3F	; 63
    1544:	8b 87       	std	Y+11, r24	; 0x0b
    1546:	9c 87       	std	Y+12, r25	; 0x0c
    1548:	ad 87       	std	Y+13, r26	; 0x0d
    154a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154c:	6b 85       	ldd	r22, Y+11	; 0x0b
    154e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1550:	8d 85       	ldd	r24, Y+13	; 0x0d
    1552:	9e 85       	ldd	r25, Y+14	; 0x0e
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	4a ef       	ldi	r20, 0xFA	; 250
    155a:	54 e4       	ldi	r21, 0x44	; 68
    155c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	8f 83       	std	Y+7, r24	; 0x07
    1566:	98 87       	std	Y+8, r25	; 0x08
    1568:	a9 87       	std	Y+9, r26	; 0x09
    156a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    156c:	6f 81       	ldd	r22, Y+7	; 0x07
    156e:	78 85       	ldd	r23, Y+8	; 0x08
    1570:	89 85       	ldd	r24, Y+9	; 0x09
    1572:	9a 85       	ldd	r25, Y+10	; 0x0a
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e8       	ldi	r20, 0x80	; 128
    157a:	5f e3       	ldi	r21, 0x3F	; 63
    157c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1580:	88 23       	and	r24, r24
    1582:	2c f4       	brge	.+10     	; 0x158e <LCD_VidDisplayOn+0x6e>
		__ticks = 1;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	9e 83       	std	Y+6, r25	; 0x06
    158a:	8d 83       	std	Y+5, r24	; 0x05
    158c:	3f c0       	rjmp	.+126    	; 0x160c <LCD_VidDisplayOn+0xec>
	else if (__tmp > 65535)
    158e:	6f 81       	ldd	r22, Y+7	; 0x07
    1590:	78 85       	ldd	r23, Y+8	; 0x08
    1592:	89 85       	ldd	r24, Y+9	; 0x09
    1594:	9a 85       	ldd	r25, Y+10	; 0x0a
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	3f ef       	ldi	r19, 0xFF	; 255
    159a:	4f e7       	ldi	r20, 0x7F	; 127
    159c:	57 e4       	ldi	r21, 0x47	; 71
    159e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15a2:	18 16       	cp	r1, r24
    15a4:	4c f5       	brge	.+82     	; 0x15f8 <LCD_VidDisplayOn+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 e2       	ldi	r20, 0x20	; 32
    15b4:	51 e4       	ldi	r21, 0x41	; 65
    15b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	bc 01       	movw	r22, r24
    15c0:	cd 01       	movw	r24, r26
    15c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	0f c0       	rjmp	.+30     	; 0x15ee <LCD_VidDisplayOn+0xce>
    15d0:	88 ec       	ldi	r24, 0xC8	; 200
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9c 83       	std	Y+4, r25	; 0x04
    15d6:	8b 83       	std	Y+3, r24	; 0x03
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	f1 f7       	brne	.-4      	; 0x15dc <LCD_VidDisplayOn+0xbc>
    15e0:	9c 83       	std	Y+4, r25	; 0x04
    15e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	69 f7       	brne	.-38     	; 0x15d0 <LCD_VidDisplayOn+0xb0>
    15f6:	14 c0       	rjmp	.+40     	; 0x1620 <LCD_VidDisplayOn+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f8:	6f 81       	ldd	r22, Y+7	; 0x07
    15fa:	78 85       	ldd	r23, Y+8	; 0x08
    15fc:	89 85       	ldd	r24, Y+9	; 0x09
    15fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1600:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	9a 83       	std	Y+2, r25	; 0x02
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <LCD_VidDisplayOn+0xf8>
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // wait for LCD to Display On
}
    1620:	2e 96       	adiw	r28, 0x0e	; 14
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <LCD_VidDisplayOff>:

void LCD_VidDisplayOff (void)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	2e 97       	sbiw	r28, 0x0e	; 14
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
	LCD_VidWriteCommand(0b00001000);	//Display Off
    1646:	88 e0       	ldi	r24, 0x08	; 8
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 e8       	ldi	r26, 0x80	; 128
    1654:	bf e3       	ldi	r27, 0x3F	; 63
    1656:	8b 87       	std	Y+11, r24	; 0x0b
    1658:	9c 87       	std	Y+12, r25	; 0x0c
    165a:	ad 87       	std	Y+13, r26	; 0x0d
    165c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1660:	7c 85       	ldd	r23, Y+12	; 0x0c
    1662:	8d 85       	ldd	r24, Y+13	; 0x0d
    1664:	9e 85       	ldd	r25, Y+14	; 0x0e
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4a ef       	ldi	r20, 0xFA	; 250
    166c:	54 e4       	ldi	r21, 0x44	; 68
    166e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	8f 83       	std	Y+7, r24	; 0x07
    1678:	98 87       	std	Y+8, r25	; 0x08
    167a:	a9 87       	std	Y+9, r26	; 0x09
    167c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e8       	ldi	r20, 0x80	; 128
    168c:	5f e3       	ldi	r21, 0x3F	; 63
    168e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1692:	88 23       	and	r24, r24
    1694:	2c f4       	brge	.+10     	; 0x16a0 <LCD_VidDisplayOff+0x6e>
		__ticks = 1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	3f c0       	rjmp	.+126    	; 0x171e <LCD_VidDisplayOff+0xec>
	else if (__tmp > 65535)
    16a0:	6f 81       	ldd	r22, Y+7	; 0x07
    16a2:	78 85       	ldd	r23, Y+8	; 0x08
    16a4:	89 85       	ldd	r24, Y+9	; 0x09
    16a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	3f ef       	ldi	r19, 0xFF	; 255
    16ac:	4f e7       	ldi	r20, 0x7F	; 127
    16ae:	57 e4       	ldi	r21, 0x47	; 71
    16b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16b4:	18 16       	cp	r1, r24
    16b6:	4c f5       	brge	.+82     	; 0x170a <LCD_VidDisplayOff+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    16bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16be:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e2       	ldi	r20, 0x20	; 32
    16c6:	51 e4       	ldi	r21, 0x41	; 65
    16c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	0f c0       	rjmp	.+30     	; 0x1700 <LCD_VidDisplayOff+0xce>
    16e2:	88 ec       	ldi	r24, 0xC8	; 200
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <LCD_VidDisplayOff+0xbc>
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	69 f7       	brne	.-38     	; 0x16e2 <LCD_VidDisplayOff+0xb0>
    1708:	14 c0       	rjmp	.+40     	; 0x1732 <LCD_VidDisplayOff+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <LCD_VidDisplayOff+0xf8>
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // wait for LCD to Display On
}
    1732:	2e 96       	adiw	r28, 0x0e	; 14
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <LCD_VidClrDisplay>:

void LCD_VidClrDisplay(void)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	2e 97       	sbiw	r28, 0x0e	; 14
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
	LCD_VidWriteCommand(0b00000001);	//Clear Display
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e0       	ldi	r26, 0x00	; 0
    1766:	b0 e4       	ldi	r27, 0x40	; 64
    1768:	8b 87       	std	Y+11, r24	; 0x0b
    176a:	9c 87       	std	Y+12, r25	; 0x0c
    176c:	ad 87       	std	Y+13, r26	; 0x0d
    176e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	6b 85       	ldd	r22, Y+11	; 0x0b
    1772:	7c 85       	ldd	r23, Y+12	; 0x0c
    1774:	8d 85       	ldd	r24, Y+13	; 0x0d
    1776:	9e 85       	ldd	r25, Y+14	; 0x0e
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a ef       	ldi	r20, 0xFA	; 250
    177e:	54 e4       	ldi	r21, 0x44	; 68
    1780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8f 83       	std	Y+7, r24	; 0x07
    178a:	98 87       	std	Y+8, r25	; 0x08
    178c:	a9 87       	std	Y+9, r26	; 0x09
    178e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1790:	6f 81       	ldd	r22, Y+7	; 0x07
    1792:	78 85       	ldd	r23, Y+8	; 0x08
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <LCD_VidClrDisplay+0x6e>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9e 83       	std	Y+6, r25	; 0x06
    17ae:	8d 83       	std	Y+5, r24	; 0x05
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <LCD_VidClrDisplay+0xec>
	else if (__tmp > 65535)
    17b2:	6f 81       	ldd	r22, Y+7	; 0x07
    17b4:	78 85       	ldd	r23, Y+8	; 0x08
    17b6:	89 85       	ldd	r24, Y+9	; 0x09
    17b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	4c f5       	brge	.+82     	; 0x181c <LCD_VidClrDisplay+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    17cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9e 83       	std	Y+6, r25	; 0x06
    17f0:	8d 83       	std	Y+5, r24	; 0x05
    17f2:	0f c0       	rjmp	.+30     	; 0x1812 <LCD_VidClrDisplay+0xce>
    17f4:	88 ec       	ldi	r24, 0xC8	; 200
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <LCD_VidClrDisplay+0xbc>
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	69 f7       	brne	.-38     	; 0x17f4 <LCD_VidClrDisplay+0xb0>
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <LCD_VidClrDisplay+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	6f 81       	ldd	r22, Y+7	; 0x07
    181e:	78 85       	ldd	r23, Y+8	; 0x08
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_VidClrDisplay+0xf8>
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // wait for LCD to Clear Display
}
    1844:	2e 96       	adiw	r28, 0x0e	; 14
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <LCD_VidCursorOnOff>:

void LCD_VidCursorOnOff(u8 LOC_u8State)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	2f 97       	sbiw	r28, 0x0f	; 15
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	8f 87       	std	Y+15, r24	; 0x0f
	if (LOC_u8State == 0)
    186c:	8f 85       	ldd	r24, Y+15	; 0x0f
    186e:	88 23       	and	r24, r24
    1870:	29 f4       	brne	.+10     	; 0x187c <LCD_VidCursorOnOff+0x26>
	{
		LCD_VidWriteCommand(0b00001100);	//Cursor On
    1872:	8c e0       	ldi	r24, 0x0C	; 12
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    187a:	07 c0       	rjmp	.+14     	; 0x188a <LCD_VidCursorOnOff+0x34>
	}
	else if (LOC_u8State ==1)
    187c:	8f 85       	ldd	r24, Y+15	; 0x0f
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	21 f4       	brne	.+8      	; 0x188a <LCD_VidCursorOnOff+0x34>
	{
		LCD_VidWriteCommand(0b00001110);	//Cursor On
    1882:	8e e0       	ldi	r24, 0x0E	; 14
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e8       	ldi	r26, 0x80	; 128
    1890:	bf e3       	ldi	r27, 0x3F	; 63
    1892:	8b 87       	std	Y+11, r24	; 0x0b
    1894:	9c 87       	std	Y+12, r25	; 0x0c
    1896:	ad 87       	std	Y+13, r26	; 0x0d
    1898:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	6b 85       	ldd	r22, Y+11	; 0x0b
    189c:	7c 85       	ldd	r23, Y+12	; 0x0c
    189e:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4a ef       	ldi	r20, 0xFA	; 250
    18a8:	54 e4       	ldi	r21, 0x44	; 68
    18aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	8f 83       	std	Y+7, r24	; 0x07
    18b4:	98 87       	std	Y+8, r25	; 0x08
    18b6:	a9 87       	std	Y+9, r26	; 0x09
    18b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <LCD_VidCursorOnOff+0x86>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	8d 83       	std	Y+5, r24	; 0x05
    18da:	3f c0       	rjmp	.+126    	; 0x195a <LCD_VidCursorOnOff+0x104>
	else if (__tmp > 65535)
    18dc:	6f 81       	ldd	r22, Y+7	; 0x07
    18de:	78 85       	ldd	r23, Y+8	; 0x08
    18e0:	89 85       	ldd	r24, Y+9	; 0x09
    18e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3f ef       	ldi	r19, 0xFF	; 255
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	57 e4       	ldi	r21, 0x47	; 71
    18ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <LCD_VidCursorOnOff+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9e 83       	std	Y+6, r25	; 0x06
    191a:	8d 83       	std	Y+5, r24	; 0x05
    191c:	0f c0       	rjmp	.+30     	; 0x193c <LCD_VidCursorOnOff+0xe6>
    191e:	88 ec       	ldi	r24, 0xC8	; 200
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	8b 83       	std	Y+3, r24	; 0x03
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <LCD_VidCursorOnOff+0xd4>
    192e:	9c 83       	std	Y+4, r25	; 0x04
    1930:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	69 f7       	brne	.-38     	; 0x191e <LCD_VidCursorOnOff+0xc8>
    1944:	14 c0       	rjmp	.+40     	; 0x196e <LCD_VidCursorOnOff+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_VidCursorOnOff+0x110>
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(1); // wait for LCD to On
}
    196e:	2f 96       	adiw	r28, 0x0f	; 15
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <LCD_VidCursorBlinking>:

void LCD_VidCursorBlinking(u8 LOC_u8State)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	2f 97       	sbiw	r28, 0x0f	; 15
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	8f 87       	std	Y+15, r24	; 0x0f
	if (LOC_u8State == 0)
    1996:	8f 85       	ldd	r24, Y+15	; 0x0f
    1998:	88 23       	and	r24, r24
    199a:	29 f4       	brne	.+10     	; 0x19a6 <LCD_VidCursorBlinking+0x26>
	{
		LCD_VidWriteCommand(0b00001110);	//Cursor On not blinking
    199c:	8e e0       	ldi	r24, 0x0E	; 14
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    19a4:	07 c0       	rjmp	.+14     	; 0x19b4 <LCD_VidCursorBlinking+0x34>
	}
	else if (LOC_u8State ==1)
    19a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	21 f4       	brne	.+8      	; 0x19b4 <LCD_VidCursorBlinking+0x34>
	{
		LCD_VidWriteCommand(0b00001111);	//Cursor On and blinking
    19ac:	8f e0       	ldi	r24, 0x0F	; 15
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_VidWriteCommand>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e8       	ldi	r26, 0x80	; 128
    19ba:	bf e3       	ldi	r27, 0x3F	; 63
    19bc:	8b 87       	std	Y+11, r24	; 0x0b
    19be:	9c 87       	std	Y+12, r25	; 0x0c
    19c0:	ad 87       	std	Y+13, r26	; 0x0d
    19c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a ef       	ldi	r20, 0xFA	; 250
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <LCD_VidCursorBlinking+0x86>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <LCD_VidCursorBlinking+0x104>
	else if (__tmp > 65535)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <LCD_VidCursorBlinking+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <LCD_VidCursorBlinking+0xe6>
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_VidCursorBlinking+0xd4>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <LCD_VidCursorBlinking+0xc8>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <LCD_VidCursorBlinking+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <LCD_VidCursorBlinking+0x110>
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(1); // wait for LCD to On
}
    1a98:	2f 96       	adiw	r28, 0x0f	; 15
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <LCD_VidWriteCommand>:

void LCD_VidWriteCommand(u8 LOC_u8Command)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	6d 97       	sbiw	r28, 0x1d	; 29
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(LCD_CTRLPort, LCD_RS_PIN, OUT_LOW);  //RS = 0   register selection
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	63 e0       	ldi	r22, 0x03	; 3
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRLPort, LCD_RW_PIN, OUT_LOW);  //RW = 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	64 e0       	ldi	r22, 0x04	; 4
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DataPort, LOC_u8Command);  // Write Command
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ad8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_CTRLPort, LCD_Enb_PIN, OUT_HIGH);  //Enable = 1 high rise edge
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	65 e0       	ldi	r22, 0x05	; 5
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e8       	ldi	r26, 0x80	; 128
    1aec:	bf e3       	ldi	r27, 0x3F	; 63
    1aee:	89 8f       	std	Y+25, r24	; 0x19
    1af0:	9a 8f       	std	Y+26, r25	; 0x1a
    1af2:	ab 8f       	std	Y+27, r26	; 0x1b
    1af4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	69 8d       	ldd	r22, Y+25	; 0x19
    1af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a ef       	ldi	r20, 0xFA	; 250
    1b04:	54 e4       	ldi	r21, 0x44	; 68
    1b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8d 8b       	std	Y+21, r24	; 0x15
    1b10:	9e 8b       	std	Y+22, r25	; 0x16
    1b12:	af 8b       	std	Y+23, r26	; 0x17
    1b14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b16:	6d 89       	ldd	r22, Y+21	; 0x15
    1b18:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <LCD_VidWriteCommand+0x8e>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9c 8b       	std	Y+20, r25	; 0x14
    1b34:	8b 8b       	std	Y+19, r24	; 0x13
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <LCD_VidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1b38:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <LCD_VidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	69 8d       	ldd	r22, Y+25	; 0x19
    1b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	8b 8b       	std	Y+19, r24	; 0x13
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <LCD_VidWriteCommand+0xee>
    1b7a:	88 ec       	ldi	r24, 0xC8	; 200
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9a 8b       	std	Y+18, r25	; 0x12
    1b80:	89 8b       	std	Y+17, r24	; 0x11
    1b82:	89 89       	ldd	r24, Y+17	; 0x11
    1b84:	9a 89       	ldd	r25, Y+18	; 0x12
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_VidWriteCommand+0xdc>
    1b8a:	9a 8b       	std	Y+18, r25	; 0x12
    1b8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b90:	9c 89       	ldd	r25, Y+20	; 0x14
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9c 8b       	std	Y+20, r25	; 0x14
    1b96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <LCD_VidWriteCommand+0xd0>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <LCD_VidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    1baa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9c 8b       	std	Y+20, r25	; 0x14
    1bb4:	8b 8b       	std	Y+19, r24	; 0x13
    1bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bba:	98 8b       	std	Y+16, r25	; 0x10
    1bbc:	8f 87       	std	Y+15, r24	; 0x0f
    1bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc0:	98 89       	ldd	r25, Y+16	; 0x10
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_VidWriteCommand+0x118>
    1bc6:	98 8b       	std	Y+16, r25	; 0x10
    1bc8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);	// required by LCD Datasheet
	DIO_VidSetPinValue(LCD_CTRLPort, LCD_Enb_PIN, OUT_LOW);  //Enable = 0  Falling edge
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	65 e0       	ldi	r22, 0x05	; 5
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e8       	ldi	r26, 0x80	; 128
    1bda:	bf e3       	ldi	r27, 0x3F	; 63
    1bdc:	8b 87       	std	Y+11, r24	; 0x0b
    1bde:	9c 87       	std	Y+12, r25	; 0x0c
    1be0:	ad 87       	std	Y+13, r26	; 0x0d
    1be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a ef       	ldi	r20, 0xFA	; 250
    1bf2:	54 e4       	ldi	r21, 0x44	; 68
    1bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8f 83       	std	Y+7, r24	; 0x07
    1bfe:	98 87       	std	Y+8, r25	; 0x08
    1c00:	a9 87       	std	Y+9, r26	; 0x09
    1c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c04:	6f 81       	ldd	r22, Y+7	; 0x07
    1c06:	78 85       	ldd	r23, Y+8	; 0x08
    1c08:	89 85       	ldd	r24, Y+9	; 0x09
    1c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <LCD_VidWriteCommand+0x17c>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <LCD_VidWriteCommand+0x1fa>
	else if (__tmp > 65535)
    1c26:	6f 81       	ldd	r22, Y+7	; 0x07
    1c28:	78 85       	ldd	r23, Y+8	; 0x08
    1c2a:	89 85       	ldd	r24, Y+9	; 0x09
    1c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <LCD_VidWriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <LCD_VidWriteCommand+0x1dc>
    1c68:	88 ec       	ldi	r24, 0xC8	; 200
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9c 83       	std	Y+4, r25	; 0x04
    1c6e:	8b 83       	std	Y+3, r24	; 0x03
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_VidWriteCommand+0x1ca>
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <LCD_VidWriteCommand+0x1be>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <LCD_VidWriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	6f 81       	ldd	r22, Y+7	; 0x07
    1c92:	78 85       	ldd	r23, Y+8	; 0x08
    1c94:	89 85       	ldd	r24, Y+9	; 0x09
    1c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_VidWriteCommand+0x206>
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // give the LCD time to wite / display
}
    1cb8:	6d 96       	adiw	r28, 0x1d	; 29
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <LCD_VidWriteData>:

void LCD_VidWriteData(u8 LOC_u8Data)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	6d 97       	sbiw	r28, 0x1d	; 29
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(LCD_CTRLPort, LCD_RS_PIN, OUT_HIGH);  //RS = 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	63 e0       	ldi	r22, 0x03	; 3
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRLPort, LCD_RW_PIN, OUT_LOW);  //RW = 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	64 e0       	ldi	r22, 0x04	; 4
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DataPort, LOC_u8Data);  // Write data
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cf8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_CTRLPort, LCD_Enb_PIN, OUT_HIGH);  //Enable = 1 high rise edge
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	65 e0       	ldi	r22, 0x05	; 5
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a0 e8       	ldi	r26, 0x80	; 128
    1d0c:	bf e3       	ldi	r27, 0x3F	; 63
    1d0e:	89 8f       	std	Y+25, r24	; 0x19
    1d10:	9a 8f       	std	Y+26, r25	; 0x1a
    1d12:	ab 8f       	std	Y+27, r26	; 0x1b
    1d14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d16:	69 8d       	ldd	r22, Y+25	; 0x19
    1d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	4a ef       	ldi	r20, 0xFA	; 250
    1d24:	54 e4       	ldi	r21, 0x44	; 68
    1d26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8d 8b       	std	Y+21, r24	; 0x15
    1d30:	9e 8b       	std	Y+22, r25	; 0x16
    1d32:	af 8b       	std	Y+23, r26	; 0x17
    1d34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d36:	6d 89       	ldd	r22, Y+21	; 0x15
    1d38:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e8       	ldi	r20, 0x80	; 128
    1d44:	5f e3       	ldi	r21, 0x3F	; 63
    1d46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <LCD_VidWriteData+0x8e>
		__ticks = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9c 8b       	std	Y+20, r25	; 0x14
    1d54:	8b 8b       	std	Y+19, r24	; 0x13
    1d56:	3f c0       	rjmp	.+126    	; 0x1dd6 <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    1d58:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	3f ef       	ldi	r19, 0xFF	; 255
    1d64:	4f e7       	ldi	r20, 0x7F	; 127
    1d66:	57 e4       	ldi	r21, 0x47	; 71
    1d68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	4c f5       	brge	.+82     	; 0x1dc2 <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	69 8d       	ldd	r22, Y+25	; 0x19
    1d72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9c 8b       	std	Y+20, r25	; 0x14
    1d96:	8b 8b       	std	Y+19, r24	; 0x13
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <LCD_VidWriteData+0xee>
    1d9a:	88 ec       	ldi	r24, 0xC8	; 200
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9a 8b       	std	Y+18, r25	; 0x12
    1da0:	89 8b       	std	Y+17, r24	; 0x11
    1da2:	89 89       	ldd	r24, Y+17	; 0x11
    1da4:	9a 89       	ldd	r25, Y+18	; 0x12
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_VidWriteData+0xdc>
    1daa:	9a 8b       	std	Y+18, r25	; 0x12
    1dac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dae:	8b 89       	ldd	r24, Y+19	; 0x13
    1db0:	9c 89       	ldd	r25, Y+20	; 0x14
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	9c 8b       	std	Y+20, r25	; 0x14
    1db6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dba:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	69 f7       	brne	.-38     	; 0x1d9a <LCD_VidWriteData+0xd0>
    1dc0:	14 c0       	rjmp	.+40     	; 0x1dea <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9c 8b       	std	Y+20, r25	; 0x14
    1dd4:	8b 8b       	std	Y+19, r24	; 0x13
    1dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dda:	98 8b       	std	Y+16, r25	; 0x10
    1ddc:	8f 87       	std	Y+15, r24	; 0x0f
    1dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de0:	98 89       	ldd	r25, Y+16	; 0x10
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_VidWriteData+0x118>
    1de6:	98 8b       	std	Y+16, r25	; 0x10
    1de8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);	// required by LCD Datasheet
	DIO_VidSetPinValue(LCD_CTRLPort, LCD_Enb_PIN, OUT_LOW);  //Enable = 0  Falling edge
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	65 e0       	ldi	r22, 0x05	; 5
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e8       	ldi	r26, 0x80	; 128
    1dfa:	bf e3       	ldi	r27, 0x3F	; 63
    1dfc:	8b 87       	std	Y+11, r24	; 0x0b
    1dfe:	9c 87       	std	Y+12, r25	; 0x0c
    1e00:	ad 87       	std	Y+13, r26	; 0x0d
    1e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a ef       	ldi	r20, 0xFA	; 250
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8f 83       	std	Y+7, r24	; 0x07
    1e1e:	98 87       	std	Y+8, r25	; 0x08
    1e20:	a9 87       	std	Y+9, r26	; 0x09
    1e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <LCD_VidWriteData+0x17c>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9e 83       	std	Y+6, r25	; 0x06
    1e42:	8d 83       	std	Y+5, r24	; 0x05
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	4c f5       	brge	.+82     	; 0x1eb0 <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <LCD_VidWriteData+0x1dc>
    1e88:	88 ec       	ldi	r24, 0xC8	; 200
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_VidWriteData+0x1ca>
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f7       	brne	.-38     	; 0x1e88 <LCD_VidWriteData+0x1be>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_VidWriteData+0x206>
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // give the LCD time to wite / display

}
    1ed8:	6d 96       	adiw	r28, 0x1d	; 29
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <LCD_VidWriteString>:

void LCD_VidWriteString(u8 LOC_u8String[])
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	6f 97       	sbiw	r28, 0x1f	; 31
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	9f 8f       	std	Y+31, r25	; 0x1f
    1f00:	8e 8f       	std	Y+30, r24	; 0x1e


	for (u8 i=0; LOC_u8String[i] != '\0'; i++)
    1f02:	1d 8e       	std	Y+29, r1	; 0x1d
    1f04:	08 c1       	rjmp	.+528    	; 0x2116 <LCD_VidWriteString+0x22c>
	{
		DIO_VidSetPinValue(LCD_CTRLPort, LCD_RS_PIN, OUT_HIGH);  //RS = 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	63 e0       	ldi	r22, 0x03	; 3
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRLPort, LCD_RW_PIN, OUT_LOW);  //RW = 0
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	64 e0       	ldi	r22, 0x04	; 4
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>

		DIO_VidSetPortValue(LCD_DataPort, LOC_u8String[i]);  // Write data
    1f1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f22:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f24:	fc 01       	movw	r30, r24
    1f26:	e2 0f       	add	r30, r18
    1f28:	f3 1f       	adc	r31, r19
    1f2a:	90 81       	ld	r25, Z
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	69 2f       	mov	r22, r25
    1f30:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <DIO_VidSetPortValue>
		DIO_VidSetPinValue(LCD_CTRLPort, LCD_Enb_PIN, OUT_HIGH);  //Enable = 1 high rise edge
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	65 e0       	ldi	r22, 0x05	; 5
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e8       	ldi	r26, 0x80	; 128
    1f44:	bf e3       	ldi	r27, 0x3F	; 63
    1f46:	89 8f       	std	Y+25, r24	; 0x19
    1f48:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a ef       	ldi	r20, 0xFA	; 250
    1f5c:	54 e4       	ldi	r21, 0x44	; 68
    1f5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	8d 8b       	std	Y+21, r24	; 0x15
    1f68:	9e 8b       	std	Y+22, r25	; 0x16
    1f6a:	af 8b       	std	Y+23, r26	; 0x17
    1f6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f70:	7e 89       	ldd	r23, Y+22	; 0x16
    1f72:	8f 89       	ldd	r24, Y+23	; 0x17
    1f74:	98 8d       	ldd	r25, Y+24	; 0x18
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <LCD_VidWriteString+0xa6>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9c 8b       	std	Y+20, r25	; 0x14
    1f8c:	8b 8b       	std	Y+19, r24	; 0x13
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <LCD_VidWriteString+0x124>
	else if (__tmp > 65535)
    1f90:	6d 89       	ldd	r22, Y+21	; 0x15
    1f92:	7e 89       	ldd	r23, Y+22	; 0x16
    1f94:	8f 89       	ldd	r24, Y+23	; 0x17
    1f96:	98 8d       	ldd	r25, Y+24	; 0x18
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <LCD_VidWriteString+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	69 8d       	ldd	r22, Y+25	; 0x19
    1faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9c 8b       	std	Y+20, r25	; 0x14
    1fce:	8b 8b       	std	Y+19, r24	; 0x13
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <LCD_VidWriteString+0x106>
    1fd2:	88 ec       	ldi	r24, 0xC8	; 200
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9a 8b       	std	Y+18, r25	; 0x12
    1fd8:	89 8b       	std	Y+17, r24	; 0x11
    1fda:	89 89       	ldd	r24, Y+17	; 0x11
    1fdc:	9a 89       	ldd	r25, Y+18	; 0x12
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_VidWriteString+0xf4>
    1fe2:	9a 8b       	std	Y+18, r25	; 0x12
    1fe4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9c 8b       	std	Y+20, r25	; 0x14
    1fee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <LCD_VidWriteString+0xe8>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <LCD_VidWriteString+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9c 8b       	std	Y+20, r25	; 0x14
    200c:	8b 8b       	std	Y+19, r24	; 0x13
    200e:	8b 89       	ldd	r24, Y+19	; 0x13
    2010:	9c 89       	ldd	r25, Y+20	; 0x14
    2012:	98 8b       	std	Y+16, r25	; 0x10
    2014:	8f 87       	std	Y+15, r24	; 0x0f
    2016:	8f 85       	ldd	r24, Y+15	; 0x0f
    2018:	98 89       	ldd	r25, Y+16	; 0x10
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_VidWriteString+0x130>
    201e:	98 8b       	std	Y+16, r25	; 0x10
    2020:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);	// required by LCD Datasheet
		DIO_VidSetPinValue(LCD_CTRLPort, LCD_Enb_PIN, OUT_LOW);  //Enable = 0  Falling edge
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	65 e0       	ldi	r22, 0x05	; 5
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e8       	ldi	r26, 0x80	; 128
    2032:	bf e3       	ldi	r27, 0x3F	; 63
    2034:	8b 87       	std	Y+11, r24	; 0x0b
    2036:	9c 87       	std	Y+12, r25	; 0x0c
    2038:	ad 87       	std	Y+13, r26	; 0x0d
    203a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203c:	6b 85       	ldd	r22, Y+11	; 0x0b
    203e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2040:	8d 85       	ldd	r24, Y+13	; 0x0d
    2042:	9e 85       	ldd	r25, Y+14	; 0x0e
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	4a ef       	ldi	r20, 0xFA	; 250
    204a:	54 e4       	ldi	r21, 0x44	; 68
    204c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	8f 83       	std	Y+7, r24	; 0x07
    2056:	98 87       	std	Y+8, r25	; 0x08
    2058:	a9 87       	std	Y+9, r26	; 0x09
    205a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2070:	88 23       	and	r24, r24
    2072:	2c f4       	brge	.+10     	; 0x207e <LCD_VidWriteString+0x194>
		__ticks = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	3f c0       	rjmp	.+126    	; 0x20fc <LCD_VidWriteString+0x212>
	else if (__tmp > 65535)
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2092:	18 16       	cp	r1, r24
    2094:	4c f5       	brge	.+82     	; 0x20e8 <LCD_VidWriteString+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2096:	6b 85       	ldd	r22, Y+11	; 0x0b
    2098:	7c 85       	ldd	r23, Y+12	; 0x0c
    209a:	8d 85       	ldd	r24, Y+13	; 0x0d
    209c:	9e 85       	ldd	r25, Y+14	; 0x0e
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	51 e4       	ldi	r21, 0x41	; 65
    20a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	0f c0       	rjmp	.+30     	; 0x20de <LCD_VidWriteString+0x1f4>
    20c0:	88 ec       	ldi	r24, 0xC8	; 200
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_VidWriteString+0x1e2>
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	69 f7       	brne	.-38     	; 0x20c0 <LCD_VidWriteString+0x1d6>
    20e6:	14 c0       	rjmp	.+40     	; 0x2110 <LCD_VidWriteString+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_VidWriteString+0x21e>
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01

void LCD_VidWriteString(u8 LOC_u8String[])
{


	for (u8 i=0; LOC_u8String[i] != '\0'; i++)
    2110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2112:	8f 5f       	subi	r24, 0xFF	; 255
    2114:	8d 8f       	std	Y+29, r24	; 0x1d
    2116:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    211e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2120:	fc 01       	movw	r30, r24
    2122:	e2 0f       	add	r30, r18
    2124:	f3 1f       	adc	r31, r19
    2126:	80 81       	ld	r24, Z
    2128:	88 23       	and	r24, r24
    212a:	09 f0       	breq	.+2      	; 0x212e <LCD_VidWriteString+0x244>
    212c:	ec ce       	rjmp	.-552    	; 0x1f06 <LCD_VidWriteString+0x1c>
		DIO_VidSetPinValue(LCD_CTRLPort, LCD_Enb_PIN, OUT_HIGH);  //Enable = 1 high rise edge
		_delay_ms(1);	// required by LCD Datasheet
		DIO_VidSetPinValue(LCD_CTRLPort, LCD_Enb_PIN, OUT_LOW);  //Enable = 0  Falling edge
		_delay_ms(1); // give the LCD time to wite / display
	}
}
    212e:	6f 96       	adiw	r28, 0x1f	; 31
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <main>:
#include "LCD_Interface.h"
#include <util/delay.h>


int main (void)
{
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	c6 54       	subi	r28, 0x46	; 70
    214e:	d0 40       	sbci	r29, 0x00	; 0
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
	LCD_VidInit();
    215a:	0e 94 96 08 	call	0x112c	; 0x112c <LCD_VidInit>
	LCD_VidWriteData('T');
	LCD_VidWriteData('A');
	LCD_VidWriteData('F');
	LCD_VidWriteData('A');
	LCD_VidWriteData(' ');*/
	LCD_VidWriteString("Anas Mostafa");
    215e:	80 e6       	ldi	r24, 0x60	; 96
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 75 0f 	call	0x1eea	; 0x1eea <LCD_VidWriteString>

	LCD_VidCursorOnOff(On);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	0e 94 2b 0c 	call	0x1856	; 0x1856 <LCD_VidCursorOnOff>
	LCD_VidCursorBlinking(On);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_VidCursorBlinking>
    2172:	fe 01       	movw	r30, r28
    2174:	ed 5b       	subi	r30, 0xBD	; 189
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e4       	ldi	r25, 0x40	; 64
    217c:	ac e9       	ldi	r26, 0x9C	; 156
    217e:	b5 e4       	ldi	r27, 0x45	; 69
    2180:	80 83       	st	Z, r24
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	a2 83       	std	Z+2, r26	; 0x02
    2186:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2188:	8e 01       	movw	r16, r28
    218a:	01 5c       	subi	r16, 0xC1	; 193
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	fe 01       	movw	r30, r28
    2190:	ed 5b       	subi	r30, 0xBD	; 189
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	f8 01       	movw	r30, r16
    21ae:	80 83       	st	Z, r24
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	a2 83       	std	Z+2, r26	; 0x02
    21b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21b6:	fe 01       	movw	r30, r28
    21b8:	ff 96       	adiw	r30, 0x3f	; 63
    21ba:	60 81       	ld	r22, Z
    21bc:	71 81       	ldd	r23, Z+1	; 0x01
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21ce:	88 23       	and	r24, r24
    21d0:	2c f4       	brge	.+10     	; 0x21dc <main+0x9c>
		__ticks = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9e af       	std	Y+62, r25	; 0x3e
    21d8:	8d af       	std	Y+61, r24	; 0x3d
    21da:	46 c0       	rjmp	.+140    	; 0x2268 <main+0x128>
	else if (__tmp > 65535)
    21dc:	fe 01       	movw	r30, r28
    21de:	ff 96       	adiw	r30, 0x3f	; 63
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	64 f5       	brge	.+88     	; 0x2250 <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	fe 01       	movw	r30, r28
    21fa:	ed 5b       	subi	r30, 0xBD	; 189
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e2       	ldi	r20, 0x20	; 32
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9e af       	std	Y+62, r25	; 0x3e
    2224:	8d af       	std	Y+61, r24	; 0x3d
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <main+0x106>
    2228:	88 ec       	ldi	r24, 0xC8	; 200
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9c af       	std	Y+60, r25	; 0x3c
    222e:	8b af       	std	Y+59, r24	; 0x3b
    2230:	8b ad       	ldd	r24, Y+59	; 0x3b
    2232:	9c ad       	ldd	r25, Y+60	; 0x3c
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <main+0xf4>
    2238:	9c af       	std	Y+60, r25	; 0x3c
    223a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	8d ad       	ldd	r24, Y+61	; 0x3d
    223e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9e af       	std	Y+62, r25	; 0x3e
    2244:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	8d ad       	ldd	r24, Y+61	; 0x3d
    2248:	9e ad       	ldd	r25, Y+62	; 0x3e
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	69 f7       	brne	.-38     	; 0x2228 <main+0xe8>
    224e:	16 c0       	rjmp	.+44     	; 0x227c <main+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	fe 01       	movw	r30, r28
    2252:	ff 96       	adiw	r30, 0x3f	; 63
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e af       	std	Y+62, r25	; 0x3e
    2266:	8d af       	std	Y+61, r24	; 0x3d
    2268:	8d ad       	ldd	r24, Y+61	; 0x3d
    226a:	9e ad       	ldd	r25, Y+62	; 0x3e
    226c:	9a af       	std	Y+58, r25	; 0x3a
    226e:	89 af       	std	Y+57, r24	; 0x39
    2270:	89 ad       	ldd	r24, Y+57	; 0x39
    2272:	9a ad       	ldd	r25, Y+58	; 0x3a
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <main+0x134>
    2278:	9a af       	std	Y+58, r25	; 0x3a
    227a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5000);

	LCD_VidDisplayOff();
    227c:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_VidDisplayOff>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	aa ef       	ldi	r26, 0xFA	; 250
    2286:	b4 e4       	ldi	r27, 0x44	; 68
    2288:	8d ab       	std	Y+53, r24	; 0x35
    228a:	9e ab       	std	Y+54, r25	; 0x36
    228c:	af ab       	std	Y+55, r26	; 0x37
    228e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	6d a9       	ldd	r22, Y+53	; 0x35
    2292:	7e a9       	ldd	r23, Y+54	; 0x36
    2294:	8f a9       	ldd	r24, Y+55	; 0x37
    2296:	98 ad       	ldd	r25, Y+56	; 0x38
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a ef       	ldi	r20, 0xFA	; 250
    229e:	54 e4       	ldi	r21, 0x44	; 68
    22a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	89 ab       	std	Y+49, r24	; 0x31
    22aa:	9a ab       	std	Y+50, r25	; 0x32
    22ac:	ab ab       	std	Y+51, r26	; 0x33
    22ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22b0:	69 a9       	ldd	r22, Y+49	; 0x31
    22b2:	7a a9       	ldd	r23, Y+50	; 0x32
    22b4:	8b a9       	ldd	r24, Y+51	; 0x33
    22b6:	9c a9       	ldd	r25, Y+52	; 0x34
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <main+0x192>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	98 ab       	std	Y+48, r25	; 0x30
    22ce:	8f a7       	std	Y+47, r24	; 0x2f
    22d0:	3f c0       	rjmp	.+126    	; 0x2350 <main+0x210>
	else if (__tmp > 65535)
    22d2:	69 a9       	ldd	r22, Y+49	; 0x31
    22d4:	7a a9       	ldd	r23, Y+50	; 0x32
    22d6:	8b a9       	ldd	r24, Y+51	; 0x33
    22d8:	9c a9       	ldd	r25, Y+52	; 0x34
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	4c f5       	brge	.+82     	; 0x233c <main+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	6d a9       	ldd	r22, Y+53	; 0x35
    22ec:	7e a9       	ldd	r23, Y+54	; 0x36
    22ee:	8f a9       	ldd	r24, Y+55	; 0x37
    22f0:	98 ad       	ldd	r25, Y+56	; 0x38
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e2       	ldi	r20, 0x20	; 32
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	98 ab       	std	Y+48, r25	; 0x30
    2310:	8f a7       	std	Y+47, r24	; 0x2f
    2312:	0f c0       	rjmp	.+30     	; 0x2332 <main+0x1f2>
    2314:	88 ec       	ldi	r24, 0xC8	; 200
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e a7       	std	Y+46, r25	; 0x2e
    231a:	8d a7       	std	Y+45, r24	; 0x2d
    231c:	8d a5       	ldd	r24, Y+45	; 0x2d
    231e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <main+0x1e0>
    2324:	9e a7       	std	Y+46, r25	; 0x2e
    2326:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	8f a5       	ldd	r24, Y+47	; 0x2f
    232a:	98 a9       	ldd	r25, Y+48	; 0x30
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	98 ab       	std	Y+48, r25	; 0x30
    2330:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	8f a5       	ldd	r24, Y+47	; 0x2f
    2334:	98 a9       	ldd	r25, Y+48	; 0x30
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	69 f7       	brne	.-38     	; 0x2314 <main+0x1d4>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <main+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	69 a9       	ldd	r22, Y+49	; 0x31
    233e:	7a a9       	ldd	r23, Y+50	; 0x32
    2340:	8b a9       	ldd	r24, Y+51	; 0x33
    2342:	9c a9       	ldd	r25, Y+52	; 0x34
    2344:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	98 ab       	std	Y+48, r25	; 0x30
    234e:	8f a7       	std	Y+47, r24	; 0x2f
    2350:	8f a5       	ldd	r24, Y+47	; 0x2f
    2352:	98 a9       	ldd	r25, Y+48	; 0x30
    2354:	9c a7       	std	Y+44, r25	; 0x2c
    2356:	8b a7       	std	Y+43, r24	; 0x2b
    2358:	8b a5       	ldd	r24, Y+43	; 0x2b
    235a:	9c a5       	ldd	r25, Y+44	; 0x2c
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <main+0x21c>
    2360:	9c a7       	std	Y+44, r25	; 0x2c
    2362:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2000);
	LCD_VidDisplayOn();
    2364:	0e 94 90 0a 	call	0x1520	; 0x1520 <LCD_VidDisplayOn>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	aa ef       	ldi	r26, 0xFA	; 250
    236e:	b4 e4       	ldi	r27, 0x44	; 68
    2370:	8f a3       	std	Y+39, r24	; 0x27
    2372:	98 a7       	std	Y+40, r25	; 0x28
    2374:	a9 a7       	std	Y+41, r26	; 0x29
    2376:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2378:	6f a1       	ldd	r22, Y+39	; 0x27
    237a:	78 a5       	ldd	r23, Y+40	; 0x28
    237c:	89 a5       	ldd	r24, Y+41	; 0x29
    237e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a ef       	ldi	r20, 0xFA	; 250
    2386:	54 e4       	ldi	r21, 0x44	; 68
    2388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	8b a3       	std	Y+35, r24	; 0x23
    2392:	9c a3       	std	Y+36, r25	; 0x24
    2394:	ad a3       	std	Y+37, r26	; 0x25
    2396:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2398:	6b a1       	ldd	r22, Y+35	; 0x23
    239a:	7c a1       	ldd	r23, Y+36	; 0x24
    239c:	8d a1       	ldd	r24, Y+37	; 0x25
    239e:	9e a1       	ldd	r25, Y+38	; 0x26
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	2c f4       	brge	.+10     	; 0x23ba <main+0x27a>
		__ticks = 1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9a a3       	std	Y+34, r25	; 0x22
    23b6:	89 a3       	std	Y+33, r24	; 0x21
    23b8:	3f c0       	rjmp	.+126    	; 0x2438 <main+0x2f8>
	else if (__tmp > 65535)
    23ba:	6b a1       	ldd	r22, Y+35	; 0x23
    23bc:	7c a1       	ldd	r23, Y+36	; 0x24
    23be:	8d a1       	ldd	r24, Y+37	; 0x25
    23c0:	9e a1       	ldd	r25, Y+38	; 0x26
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	3f ef       	ldi	r19, 0xFF	; 255
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	57 e4       	ldi	r21, 0x47	; 71
    23ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	4c f5       	brge	.+82     	; 0x2424 <main+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d2:	6f a1       	ldd	r22, Y+39	; 0x27
    23d4:	78 a5       	ldd	r23, Y+40	; 0x28
    23d6:	89 a5       	ldd	r24, Y+41	; 0x29
    23d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e2       	ldi	r20, 0x20	; 32
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9a a3       	std	Y+34, r25	; 0x22
    23f8:	89 a3       	std	Y+33, r24	; 0x21
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <main+0x2da>
    23fc:	88 ec       	ldi	r24, 0xC8	; 200
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	98 a3       	std	Y+32, r25	; 0x20
    2402:	8f 8f       	std	Y+31, r24	; 0x1f
    2404:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2406:	98 a1       	ldd	r25, Y+32	; 0x20
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <main+0x2c8>
    240c:	98 a3       	std	Y+32, r25	; 0x20
    240e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2410:	89 a1       	ldd	r24, Y+33	; 0x21
    2412:	9a a1       	ldd	r25, Y+34	; 0x22
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	9a a3       	std	Y+34, r25	; 0x22
    2418:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	89 a1       	ldd	r24, Y+33	; 0x21
    241c:	9a a1       	ldd	r25, Y+34	; 0x22
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	69 f7       	brne	.-38     	; 0x23fc <main+0x2bc>
    2422:	14 c0       	rjmp	.+40     	; 0x244c <main+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2424:	6b a1       	ldd	r22, Y+35	; 0x23
    2426:	7c a1       	ldd	r23, Y+36	; 0x24
    2428:	8d a1       	ldd	r24, Y+37	; 0x25
    242a:	9e a1       	ldd	r25, Y+38	; 0x26
    242c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9a a3       	std	Y+34, r25	; 0x22
    2436:	89 a3       	std	Y+33, r24	; 0x21
    2438:	89 a1       	ldd	r24, Y+33	; 0x21
    243a:	9a a1       	ldd	r25, Y+34	; 0x22
    243c:	9e 8f       	std	Y+30, r25	; 0x1e
    243e:	8d 8f       	std	Y+29, r24	; 0x1d
    2440:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2442:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <main+0x304>
    2448:	9e 8f       	std	Y+30, r25	; 0x1e
    244a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);
	LCD_VidClrDisplay();
    244c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <LCD_VidClrDisplay>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	aa ef       	ldi	r26, 0xFA	; 250
    2456:	b4 e4       	ldi	r27, 0x44	; 68
    2458:	89 8f       	std	Y+25, r24	; 0x19
    245a:	9a 8f       	std	Y+26, r25	; 0x1a
    245c:	ab 8f       	std	Y+27, r26	; 0x1b
    245e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2460:	69 8d       	ldd	r22, Y+25	; 0x19
    2462:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2464:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2466:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	4a ef       	ldi	r20, 0xFA	; 250
    246e:	54 e4       	ldi	r21, 0x44	; 68
    2470:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	8d 8b       	std	Y+21, r24	; 0x15
    247a:	9e 8b       	std	Y+22, r25	; 0x16
    247c:	af 8b       	std	Y+23, r26	; 0x17
    247e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2480:	6d 89       	ldd	r22, Y+21	; 0x15
    2482:	7e 89       	ldd	r23, Y+22	; 0x16
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	2c f4       	brge	.+10     	; 0x24a2 <main+0x362>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9c 8b       	std	Y+20, r25	; 0x14
    249e:	8b 8b       	std	Y+19, r24	; 0x13
    24a0:	3f c0       	rjmp	.+126    	; 0x2520 <main+0x3e0>
	else if (__tmp > 65535)
    24a2:	6d 89       	ldd	r22, Y+21	; 0x15
    24a4:	7e 89       	ldd	r23, Y+22	; 0x16
    24a6:	8f 89       	ldd	r24, Y+23	; 0x17
    24a8:	98 8d       	ldd	r25, Y+24	; 0x18
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	3f ef       	ldi	r19, 0xFF	; 255
    24ae:	4f e7       	ldi	r20, 0x7F	; 127
    24b0:	57 e4       	ldi	r21, 0x47	; 71
    24b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24b6:	18 16       	cp	r1, r24
    24b8:	4c f5       	brge	.+82     	; 0x250c <main+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	69 8d       	ldd	r22, Y+25	; 0x19
    24bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e2       	ldi	r20, 0x20	; 32
    24c8:	51 e4       	ldi	r21, 0x41	; 65
    24ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9c 8b       	std	Y+20, r25	; 0x14
    24e0:	8b 8b       	std	Y+19, r24	; 0x13
    24e2:	0f c0       	rjmp	.+30     	; 0x2502 <main+0x3c2>
    24e4:	88 ec       	ldi	r24, 0xC8	; 200
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9a 8b       	std	Y+18, r25	; 0x12
    24ea:	89 8b       	std	Y+17, r24	; 0x11
    24ec:	89 89       	ldd	r24, Y+17	; 0x11
    24ee:	9a 89       	ldd	r25, Y+18	; 0x12
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <main+0x3b0>
    24f4:	9a 8b       	std	Y+18, r25	; 0x12
    24f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f8:	8b 89       	ldd	r24, Y+19	; 0x13
    24fa:	9c 89       	ldd	r25, Y+20	; 0x14
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	9c 8b       	std	Y+20, r25	; 0x14
    2500:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	8b 89       	ldd	r24, Y+19	; 0x13
    2504:	9c 89       	ldd	r25, Y+20	; 0x14
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	69 f7       	brne	.-38     	; 0x24e4 <main+0x3a4>
    250a:	14 c0       	rjmp	.+40     	; 0x2534 <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250c:	6d 89       	ldd	r22, Y+21	; 0x15
    250e:	7e 89       	ldd	r23, Y+22	; 0x16
    2510:	8f 89       	ldd	r24, Y+23	; 0x17
    2512:	98 8d       	ldd	r25, Y+24	; 0x18
    2514:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9c 8b       	std	Y+20, r25	; 0x14
    251e:	8b 8b       	std	Y+19, r24	; 0x13
    2520:	8b 89       	ldd	r24, Y+19	; 0x13
    2522:	9c 89       	ldd	r25, Y+20	; 0x14
    2524:	98 8b       	std	Y+16, r25	; 0x10
    2526:	8f 87       	std	Y+15, r24	; 0x0f
    2528:	8f 85       	ldd	r24, Y+15	; 0x0f
    252a:	98 89       	ldd	r25, Y+16	; 0x10
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <main+0x3ec>
    2530:	98 8b       	std	Y+16, r25	; 0x10
    2532:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	LCD_VidWriteString("Mostafa Ismail");
    2534:	8d e6       	ldi	r24, 0x6D	; 109
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 94 75 0f 	call	0x1eea	; 0x1eea <LCD_VidWriteString>
	LCD_VidCursorOnOff(On);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <LCD_VidCursorOnOff>
	LCD_VidCursorBlinking(Off);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_VidCursorBlinking>
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e4       	ldi	r25, 0x40	; 64
    254c:	ac e9       	ldi	r26, 0x9C	; 156
    254e:	b5 e4       	ldi	r27, 0x45	; 69
    2550:	8b 87       	std	Y+11, r24	; 0x0b
    2552:	9c 87       	std	Y+12, r25	; 0x0c
    2554:	ad 87       	std	Y+13, r26	; 0x0d
    2556:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2558:	6b 85       	ldd	r22, Y+11	; 0x0b
    255a:	7c 85       	ldd	r23, Y+12	; 0x0c
    255c:	8d 85       	ldd	r24, Y+13	; 0x0d
    255e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a ef       	ldi	r20, 0xFA	; 250
    2566:	54 e4       	ldi	r21, 0x44	; 68
    2568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	8f 83       	std	Y+7, r24	; 0x07
    2572:	98 87       	std	Y+8, r25	; 0x08
    2574:	a9 87       	std	Y+9, r26	; 0x09
    2576:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2578:	6f 81       	ldd	r22, Y+7	; 0x07
    257a:	78 85       	ldd	r23, Y+8	; 0x08
    257c:	89 85       	ldd	r24, Y+9	; 0x09
    257e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e8       	ldi	r20, 0x80	; 128
    2586:	5f e3       	ldi	r21, 0x3F	; 63
    2588:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    258c:	88 23       	and	r24, r24
    258e:	2c f4       	brge	.+10     	; 0x259a <main+0x45a>
		__ticks = 1;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <main+0x4d8>
	else if (__tmp > 65535)
    259a:	6f 81       	ldd	r22, Y+7	; 0x07
    259c:	78 85       	ldd	r23, Y+8	; 0x08
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	3f ef       	ldi	r19, 0xFF	; 255
    25a6:	4f e7       	ldi	r20, 0x7F	; 127
    25a8:	57 e4       	ldi	r21, 0x47	; 71
    25aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25ae:	18 16       	cp	r1, r24
    25b0:	4c f5       	brge	.+82     	; 0x2604 <main+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e2       	ldi	r20, 0x20	; 32
    25c0:	51 e4       	ldi	r21, 0x41	; 65
    25c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	0f c0       	rjmp	.+30     	; 0x25fa <main+0x4ba>
    25dc:	88 ec       	ldi	r24, 0xC8	; 200
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	8b 83       	std	Y+3, r24	; 0x03
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	9c 81       	ldd	r25, Y+4	; 0x04
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <main+0x4a8>
    25ec:	9c 83       	std	Y+4, r25	; 0x04
    25ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	8d 81       	ldd	r24, Y+5	; 0x05
    25f2:	9e 81       	ldd	r25, Y+6	; 0x06
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
    25fc:	9e 81       	ldd	r25, Y+6	; 0x06
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	69 f7       	brne	.-38     	; 0x25dc <main+0x49c>
    2602:	14 c0       	rjmp	.+40     	; 0x262c <main+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <main+0x4e4>
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	LCD_VidCursorOnOff(Off);
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <LCD_VidCursorOnOff>
    2632:	ff cf       	rjmp	.-2      	; 0x2632 <main+0x4f2>

00002634 <__prologue_saves__>:
    2634:	2f 92       	push	r2
    2636:	3f 92       	push	r3
    2638:	4f 92       	push	r4
    263a:	5f 92       	push	r5
    263c:	6f 92       	push	r6
    263e:	7f 92       	push	r7
    2640:	8f 92       	push	r8
    2642:	9f 92       	push	r9
    2644:	af 92       	push	r10
    2646:	bf 92       	push	r11
    2648:	cf 92       	push	r12
    264a:	df 92       	push	r13
    264c:	ef 92       	push	r14
    264e:	ff 92       	push	r15
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	ca 1b       	sub	r28, r26
    265e:	db 0b       	sbc	r29, r27
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	09 94       	ijmp

0000266c <__epilogue_restores__>:
    266c:	2a 88       	ldd	r2, Y+18	; 0x12
    266e:	39 88       	ldd	r3, Y+17	; 0x11
    2670:	48 88       	ldd	r4, Y+16	; 0x10
    2672:	5f 84       	ldd	r5, Y+15	; 0x0f
    2674:	6e 84       	ldd	r6, Y+14	; 0x0e
    2676:	7d 84       	ldd	r7, Y+13	; 0x0d
    2678:	8c 84       	ldd	r8, Y+12	; 0x0c
    267a:	9b 84       	ldd	r9, Y+11	; 0x0b
    267c:	aa 84       	ldd	r10, Y+10	; 0x0a
    267e:	b9 84       	ldd	r11, Y+9	; 0x09
    2680:	c8 84       	ldd	r12, Y+8	; 0x08
    2682:	df 80       	ldd	r13, Y+7	; 0x07
    2684:	ee 80       	ldd	r14, Y+6	; 0x06
    2686:	fd 80       	ldd	r15, Y+5	; 0x05
    2688:	0c 81       	ldd	r16, Y+4	; 0x04
    268a:	1b 81       	ldd	r17, Y+3	; 0x03
    268c:	aa 81       	ldd	r26, Y+2	; 0x02
    268e:	b9 81       	ldd	r27, Y+1	; 0x01
    2690:	ce 0f       	add	r28, r30
    2692:	d1 1d       	adc	r29, r1
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	ed 01       	movw	r28, r26
    26a0:	08 95       	ret

000026a2 <_exit>:
    26a2:	f8 94       	cli

000026a4 <__stop_program>:
    26a4:	ff cf       	rjmp	.-2      	; 0x26a4 <__stop_program>
