
DIO_input.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000330  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000816  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#define SET_bit(var, bit_no)		var = (1<<bit_no)|var
#define CLR_bit(var, bit_no)		var = ~(1<<bit_no)&var

int main (void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRD=0x00;
  74:	e1 e3       	ldi	r30, 0x31	; 49
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	DDRA=0xff;
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	80 83       	st	Z, r24
	SET_bit(PORTD, 0);
  82:	a2 e3       	ldi	r26, 0x32	; 50
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e2 e3       	ldi	r30, 0x32	; 50
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	8c 93       	st	X, r24

	while(1)
	{
		if ((PIND&0b00000001)==0)
  90:	e0 e3       	ldi	r30, 0x30	; 48
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 2f       	mov	r24, r24
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	81 70       	andi	r24, 0x01	; 1
  9c:	90 70       	andi	r25, 0x00	; 0
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	41 f4       	brne	.+16     	; 0xb2 <main+0x46>
		{
			SET_bit(PORTA, 0);
  a2:	ab e3       	ldi	r26, 0x3B	; 59
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	eb e3       	ldi	r30, 0x3B	; 59
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	8c 93       	st	X, r24
  b0:	ef cf       	rjmp	.-34     	; 0x90 <main+0x24>
		}
		else
		{
			CLR_bit(PORTA, 0);
  b2:	ab e3       	ldi	r26, 0x3B	; 59
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	eb e3       	ldi	r30, 0x3B	; 59
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	8c 93       	st	X, r24
  c0:	e7 cf       	rjmp	.-50     	; 0x90 <main+0x24>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
